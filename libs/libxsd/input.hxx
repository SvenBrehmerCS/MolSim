// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

#ifndef CXX______RES_INPUT_HXX
#define CXX______RES_INPUT_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (LIBXSD_VERSION != 400002000000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class sim_t;
class output_t;
class param_t;
class particle_t;
class cuboid_t;

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class sim_t: public ::xml_schema::type
{
  public:
  // output
  //
  typedef ::output_t output_type;
  typedef ::xsd::cxx::tree::traits< output_type, char > output_traits;

  const output_type&
  output () const;

  output_type&
  output ();

  void
  output (const output_type& x);

  void
  output (::std::unique_ptr< output_type > p);

  // param
  //
  typedef ::param_t param_type;
  typedef ::xsd::cxx::tree::traits< param_type, char > param_traits;

  const param_type&
  param () const;

  param_type&
  param ();

  void
  param (const param_type& x);

  void
  param (::std::unique_ptr< param_type > p);

  // particle
  //
  typedef ::particle_t particle_type;
  typedef ::xsd::cxx::tree::sequence< particle_type > particle_sequence;
  typedef particle_sequence::iterator particle_iterator;
  typedef particle_sequence::const_iterator particle_const_iterator;
  typedef ::xsd::cxx::tree::traits< particle_type, char > particle_traits;

  const particle_sequence&
  particle () const;

  particle_sequence&
  particle ();

  void
  particle (const particle_sequence& s);

  // cuboid
  //
  typedef ::cuboid_t cuboid_type;
  typedef ::xsd::cxx::tree::sequence< cuboid_type > cuboid_sequence;
  typedef cuboid_sequence::iterator cuboid_iterator;
  typedef cuboid_sequence::const_iterator cuboid_const_iterator;
  typedef ::xsd::cxx::tree::traits< cuboid_type, char > cuboid_traits;

  const cuboid_sequence&
  cuboid () const;

  cuboid_sequence&
  cuboid ();

  void
  cuboid (const cuboid_sequence& s);

  // Constructors.
  //
  sim_t (const output_type&,
         const param_type&);

  sim_t (::std::unique_ptr< output_type >,
         ::std::unique_ptr< param_type >);

  sim_t (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  sim_t (const sim_t& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  virtual sim_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  sim_t&
  operator= (const sim_t& x);

  virtual 
  ~sim_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< output_type > output_;
  ::xsd::cxx::tree::one< param_type > param_;
  particle_sequence particle_;
  cuboid_sequence cuboid_;
};

class output_t: public ::xml_schema::type
{
  public:
  // name
  //
  typedef ::xml_schema::string name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::unique_ptr< name_type > p);

  static const name_type&
  name_default_value ();

  // frequency
  //
  typedef ::xml_schema::int_ frequency_type;
  typedef ::xsd::cxx::tree::traits< frequency_type, char > frequency_traits;

  const frequency_type&
  frequency () const;

  frequency_type&
  frequency ();

  void
  frequency (const frequency_type& x);

  static frequency_type
  frequency_default_value ();

  // Constructors.
  //
  output_t (const name_type&,
            const frequency_type&);

  output_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  output_t (const output_t& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual output_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  output_t&
  operator= (const output_t& x);

  virtual 
  ~output_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< name_type > name_;
  static const name_type name_default_value_;
  ::xsd::cxx::tree::one< frequency_type > frequency_;
};

class param_t: public ::xml_schema::type
{
  public:
  // t_end
  //
  typedef ::xml_schema::double_ t_end_type;
  typedef ::xsd::cxx::tree::traits< t_end_type, char, ::xsd::cxx::tree::schema_type::double_ > t_end_traits;

  const t_end_type&
  t_end () const;

  t_end_type&
  t_end ();

  void
  t_end (const t_end_type& x);

  static t_end_type
  t_end_default_value ();

  // delta_t
  //
  typedef ::xml_schema::double_ delta_t_type;
  typedef ::xsd::cxx::tree::traits< delta_t_type, char, ::xsd::cxx::tree::schema_type::double_ > delta_t_traits;

  const delta_t_type&
  delta_t () const;

  delta_t_type&
  delta_t ();

  void
  delta_t (const delta_t_type& x);

  static delta_t_type
  delta_t_default_value ();

  // Constructors.
  //
  param_t (const t_end_type&,
           const delta_t_type&);

  param_t (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  param_t (const param_t& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual param_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  param_t&
  operator= (const param_t& x);

  virtual 
  ~param_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< t_end_type > t_end_;
  ::xsd::cxx::tree::one< delta_t_type > delta_t_;
};

class particle_t: public ::xml_schema::type
{
  public:
  // pos_x
  //
  typedef ::xml_schema::double_ pos_x_type;
  typedef ::xsd::cxx::tree::traits< pos_x_type, char, ::xsd::cxx::tree::schema_type::double_ > pos_x_traits;

  const pos_x_type&
  pos_x () const;

  pos_x_type&
  pos_x ();

  void
  pos_x (const pos_x_type& x);

  // pos_y
  //
  typedef ::xml_schema::double_ pos_y_type;
  typedef ::xsd::cxx::tree::traits< pos_y_type, char, ::xsd::cxx::tree::schema_type::double_ > pos_y_traits;

  const pos_y_type&
  pos_y () const;

  pos_y_type&
  pos_y ();

  void
  pos_y (const pos_y_type& x);

  // pos_z
  //
  typedef ::xml_schema::double_ pos_z_type;
  typedef ::xsd::cxx::tree::traits< pos_z_type, char, ::xsd::cxx::tree::schema_type::double_ > pos_z_traits;

  const pos_z_type&
  pos_z () const;

  pos_z_type&
  pos_z ();

  void
  pos_z (const pos_z_type& x);

  // vel_x
  //
  typedef ::xml_schema::double_ vel_x_type;
  typedef ::xsd::cxx::tree::traits< vel_x_type, char, ::xsd::cxx::tree::schema_type::double_ > vel_x_traits;

  const vel_x_type&
  vel_x () const;

  vel_x_type&
  vel_x ();

  void
  vel_x (const vel_x_type& x);

  // vel_y
  //
  typedef ::xml_schema::double_ vel_y_type;
  typedef ::xsd::cxx::tree::traits< vel_y_type, char, ::xsd::cxx::tree::schema_type::double_ > vel_y_traits;

  const vel_y_type&
  vel_y () const;

  vel_y_type&
  vel_y ();

  void
  vel_y (const vel_y_type& x);

  // vel_z
  //
  typedef ::xml_schema::double_ vel_z_type;
  typedef ::xsd::cxx::tree::traits< vel_z_type, char, ::xsd::cxx::tree::schema_type::double_ > vel_z_traits;

  const vel_z_type&
  vel_z () const;

  vel_z_type&
  vel_z ();

  void
  vel_z (const vel_z_type& x);

  // m
  //
  typedef ::xml_schema::double_ m_type;
  typedef ::xsd::cxx::tree::traits< m_type, char, ::xsd::cxx::tree::schema_type::double_ > m_traits;

  const m_type&
  m () const;

  m_type&
  m ();

  void
  m (const m_type& x);

  // Constructors.
  //
  particle_t (const pos_x_type&,
              const pos_y_type&,
              const pos_z_type&,
              const vel_x_type&,
              const vel_y_type&,
              const vel_z_type&,
              const m_type&);

  particle_t (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  particle_t (const particle_t& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual particle_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  particle_t&
  operator= (const particle_t& x);

  virtual 
  ~particle_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< pos_x_type > pos_x_;
  ::xsd::cxx::tree::one< pos_y_type > pos_y_;
  ::xsd::cxx::tree::one< pos_z_type > pos_z_;
  ::xsd::cxx::tree::one< vel_x_type > vel_x_;
  ::xsd::cxx::tree::one< vel_y_type > vel_y_;
  ::xsd::cxx::tree::one< vel_z_type > vel_z_;
  ::xsd::cxx::tree::one< m_type > m_;
};

class cuboid_t: public ::xml_schema::type
{
  public:
  // pos_x
  //
  typedef ::xml_schema::double_ pos_x_type;
  typedef ::xsd::cxx::tree::traits< pos_x_type, char, ::xsd::cxx::tree::schema_type::double_ > pos_x_traits;

  const pos_x_type&
  pos_x () const;

  pos_x_type&
  pos_x ();

  void
  pos_x (const pos_x_type& x);

  // pos_y
  //
  typedef ::xml_schema::double_ pos_y_type;
  typedef ::xsd::cxx::tree::traits< pos_y_type, char, ::xsd::cxx::tree::schema_type::double_ > pos_y_traits;

  const pos_y_type&
  pos_y () const;

  pos_y_type&
  pos_y ();

  void
  pos_y (const pos_y_type& x);

  // pos_z
  //
  typedef ::xml_schema::double_ pos_z_type;
  typedef ::xsd::cxx::tree::traits< pos_z_type, char, ::xsd::cxx::tree::schema_type::double_ > pos_z_traits;

  const pos_z_type&
  pos_z () const;

  pos_z_type&
  pos_z ();

  void
  pos_z (const pos_z_type& x);

  // vel_x
  //
  typedef ::xml_schema::double_ vel_x_type;
  typedef ::xsd::cxx::tree::traits< vel_x_type, char, ::xsd::cxx::tree::schema_type::double_ > vel_x_traits;

  const vel_x_type&
  vel_x () const;

  vel_x_type&
  vel_x ();

  void
  vel_x (const vel_x_type& x);

  // vel_y
  //
  typedef ::xml_schema::double_ vel_y_type;
  typedef ::xsd::cxx::tree::traits< vel_y_type, char, ::xsd::cxx::tree::schema_type::double_ > vel_y_traits;

  const vel_y_type&
  vel_y () const;

  vel_y_type&
  vel_y ();

  void
  vel_y (const vel_y_type& x);

  // vel_z
  //
  typedef ::xml_schema::double_ vel_z_type;
  typedef ::xsd::cxx::tree::traits< vel_z_type, char, ::xsd::cxx::tree::schema_type::double_ > vel_z_traits;

  const vel_z_type&
  vel_z () const;

  vel_z_type&
  vel_z ();

  void
  vel_z (const vel_z_type& x);

  // m
  //
  typedef ::xml_schema::double_ m_type;
  typedef ::xsd::cxx::tree::traits< m_type, char, ::xsd::cxx::tree::schema_type::double_ > m_traits;

  const m_type&
  m () const;

  m_type&
  m ();

  void
  m (const m_type& x);

  // n_x
  //
  typedef ::xml_schema::int_ n_x_type;
  typedef ::xsd::cxx::tree::traits< n_x_type, char > n_x_traits;

  const n_x_type&
  n_x () const;

  n_x_type&
  n_x ();

  void
  n_x (const n_x_type& x);

  // n_y
  //
  typedef ::xml_schema::int_ n_y_type;
  typedef ::xsd::cxx::tree::traits< n_y_type, char > n_y_traits;

  const n_y_type&
  n_y () const;

  n_y_type&
  n_y ();

  void
  n_y (const n_y_type& x);

  // n_z
  //
  typedef ::xml_schema::int_ n_z_type;
  typedef ::xsd::cxx::tree::traits< n_z_type, char > n_z_traits;

  const n_z_type&
  n_z () const;

  n_z_type&
  n_z ();

  void
  n_z (const n_z_type& x);

  // h
  //
  typedef ::xml_schema::double_ h_type;
  typedef ::xsd::cxx::tree::traits< h_type, char, ::xsd::cxx::tree::schema_type::double_ > h_traits;

  const h_type&
  h () const;

  h_type&
  h ();

  void
  h (const h_type& x);

  // b_motion
  //
  typedef ::xml_schema::double_ b_motion_type;
  typedef ::xsd::cxx::tree::traits< b_motion_type, char, ::xsd::cxx::tree::schema_type::double_ > b_motion_traits;

  const b_motion_type&
  b_motion () const;

  b_motion_type&
  b_motion ();

  void
  b_motion (const b_motion_type& x);

  // Constructors.
  //
  cuboid_t (const pos_x_type&,
            const pos_y_type&,
            const pos_z_type&,
            const vel_x_type&,
            const vel_y_type&,
            const vel_z_type&,
            const m_type&,
            const n_x_type&,
            const n_y_type&,
            const n_z_type&,
            const h_type&,
            const b_motion_type&);

  cuboid_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  cuboid_t (const cuboid_t& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual cuboid_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  cuboid_t&
  operator= (const cuboid_t& x);

  virtual 
  ~cuboid_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< pos_x_type > pos_x_;
  ::xsd::cxx::tree::one< pos_y_type > pos_y_;
  ::xsd::cxx::tree::one< pos_z_type > pos_z_;
  ::xsd::cxx::tree::one< vel_x_type > vel_x_;
  ::xsd::cxx::tree::one< vel_y_type > vel_y_;
  ::xsd::cxx::tree::one< vel_z_type > vel_z_;
  ::xsd::cxx::tree::one< m_type > m_;
  ::xsd::cxx::tree::one< n_x_type > n_x_;
  ::xsd::cxx::tree::one< n_y_type > n_y_;
  ::xsd::cxx::tree::one< n_z_type > n_z_;
  ::xsd::cxx::tree::one< h_type > h_;
  ::xsd::cxx::tree::one< b_motion_type > b_motion_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::unique_ptr< ::sim_t >
simulation (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::sim_t >
simulation (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::sim_t >
simulation (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::unique_ptr< ::sim_t >
simulation (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::sim_t >
simulation (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::sim_t >
simulation (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::sim_t >
simulation (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::sim_t >
simulation (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::sim_t >
simulation (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::unique_ptr< ::sim_t >
simulation (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::sim_t >
simulation (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::sim_t >
simulation (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::unique_ptr< ::sim_t >
simulation (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::sim_t >
simulation (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX______RES_INPUT_HXX
