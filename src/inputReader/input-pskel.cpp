// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "input-pskel.h"

// sim_t_pskel
//

void sim_t_pskel::output_parser(::output_t_pskel& p) { this->output_parser_ = &p; }

void sim_t_pskel::param_parser(::param_t_pskel& p) { this->param_parser_ = &p; }

void sim_t_pskel::particle_parser(::particle_t_pskel& p) { this->particle_parser_ = &p; }

void sim_t_pskel::cuboid_parser(::cuboid_t_pskel& p) { this->cuboid_parser_ = &p; }

void sim_t_pskel::parsers(::output_t_pskel& output, ::param_t_pskel& param, ::particle_t_pskel& particle, ::cuboid_t_pskel& cuboid) {
    this->output_parser_ = &output;
    this->param_parser_ = &param;
    this->particle_parser_ = &particle;
    this->cuboid_parser_ = &cuboid;
}

sim_t_pskel::sim_t_pskel()
    : output_parser_(0)
    , param_parser_(0)
    , particle_parser_(0)
    , cuboid_parser_(0) { }

// output_t_pskel
//

void output_t_pskel::name_parser(::xml_schema::string_pskel& p) { this->name_parser_ = &p; }

void output_t_pskel::frequency_parser(::xml_schema::int_pskel& p) { this->frequency_parser_ = &p; }

void output_t_pskel::parsers(::xml_schema::string_pskel& name, ::xml_schema::int_pskel& frequency) {
    this->name_parser_ = &name;
    this->frequency_parser_ = &frequency;
}

output_t_pskel::output_t_pskel()
    : name_parser_(0)
    , frequency_parser_(0) { }

// param_t_pskel
//

void param_t_pskel::t_end_parser(::xml_schema::double_pskel& p) { this->t_end_parser_ = &p; }

void param_t_pskel::delta_t_parser(::xml_schema::double_pskel& p) { this->delta_t_parser_ = &p; }

void param_t_pskel::parsers(::xml_schema::double_pskel& t_end, ::xml_schema::double_pskel& delta_t) {
    this->t_end_parser_ = &t_end;
    this->delta_t_parser_ = &delta_t;
}

param_t_pskel::param_t_pskel()
    : t_end_parser_(0)
    , delta_t_parser_(0) { }

// particle_t_pskel
//

void particle_t_pskel::pos_x_parser(::xml_schema::double_pskel& p) { this->pos_x_parser_ = &p; }

void particle_t_pskel::pos_y_parser(::xml_schema::double_pskel& p) { this->pos_y_parser_ = &p; }

void particle_t_pskel::pos_z_parser(::xml_schema::double_pskel& p) { this->pos_z_parser_ = &p; }

void particle_t_pskel::vel_x_parser(::xml_schema::double_pskel& p) { this->vel_x_parser_ = &p; }

void particle_t_pskel::vel_y_parser(::xml_schema::double_pskel& p) { this->vel_y_parser_ = &p; }

void particle_t_pskel::vel_z_parser(::xml_schema::double_pskel& p) { this->vel_z_parser_ = &p; }

void particle_t_pskel::m_parser(::xml_schema::double_pskel& p) { this->m_parser_ = &p; }

void particle_t_pskel::parsers(::xml_schema::double_pskel& pos_x, ::xml_schema::double_pskel& pos_y, ::xml_schema::double_pskel& pos_z,
    ::xml_schema::double_pskel& vel_x, ::xml_schema::double_pskel& vel_y, ::xml_schema::double_pskel& vel_z, ::xml_schema::double_pskel& m) {
    this->pos_x_parser_ = &pos_x;
    this->pos_y_parser_ = &pos_y;
    this->pos_z_parser_ = &pos_z;
    this->vel_x_parser_ = &vel_x;
    this->vel_y_parser_ = &vel_y;
    this->vel_z_parser_ = &vel_z;
    this->m_parser_ = &m;
}

particle_t_pskel::particle_t_pskel()
    : pos_x_parser_(0)
    , pos_y_parser_(0)
    , pos_z_parser_(0)
    , vel_x_parser_(0)
    , vel_y_parser_(0)
    , vel_z_parser_(0)
    , m_parser_(0) { }

// cuboid_t_pskel
//

void cuboid_t_pskel::pos_x_parser(::xml_schema::double_pskel& p) { this->pos_x_parser_ = &p; }

void cuboid_t_pskel::pos_y_parser(::xml_schema::double_pskel& p) { this->pos_y_parser_ = &p; }

void cuboid_t_pskel::pos_z_parser(::xml_schema::double_pskel& p) { this->pos_z_parser_ = &p; }

void cuboid_t_pskel::vel_x_parser(::xml_schema::double_pskel& p) { this->vel_x_parser_ = &p; }

void cuboid_t_pskel::vel_y_parser(::xml_schema::double_pskel& p) { this->vel_y_parser_ = &p; }

void cuboid_t_pskel::vel_z_parser(::xml_schema::double_pskel& p) { this->vel_z_parser_ = &p; }

void cuboid_t_pskel::m_parser(::xml_schema::double_pskel& p) { this->m_parser_ = &p; }

void cuboid_t_pskel::n_x_parser(::xml_schema::int_pskel& p) { this->n_x_parser_ = &p; }

void cuboid_t_pskel::n_y_parser(::xml_schema::int_pskel& p) { this->n_y_parser_ = &p; }

void cuboid_t_pskel::n_z_parser(::xml_schema::int_pskel& p) { this->n_z_parser_ = &p; }

void cuboid_t_pskel::h_parser(::xml_schema::double_pskel& p) { this->h_parser_ = &p; }

void cuboid_t_pskel::b_motion_parser(::xml_schema::double_pskel& p) { this->b_motion_parser_ = &p; }

void cuboid_t_pskel::parsers(::xml_schema::double_pskel& pos_x, ::xml_schema::double_pskel& pos_y, ::xml_schema::double_pskel& pos_z,
    ::xml_schema::double_pskel& vel_x, ::xml_schema::double_pskel& vel_y, ::xml_schema::double_pskel& vel_z, ::xml_schema::double_pskel& m,
    ::xml_schema::int_pskel& n_x, ::xml_schema::int_pskel& n_y, ::xml_schema::int_pskel& n_z, ::xml_schema::double_pskel& h,
    ::xml_schema::double_pskel& b_motion) {
    this->pos_x_parser_ = &pos_x;
    this->pos_y_parser_ = &pos_y;
    this->pos_z_parser_ = &pos_z;
    this->vel_x_parser_ = &vel_x;
    this->vel_y_parser_ = &vel_y;
    this->vel_z_parser_ = &vel_z;
    this->m_parser_ = &m;
    this->n_x_parser_ = &n_x;
    this->n_y_parser_ = &n_y;
    this->n_z_parser_ = &n_z;
    this->h_parser_ = &h;
    this->b_motion_parser_ = &b_motion;
}

cuboid_t_pskel::cuboid_t_pskel()
    : pos_x_parser_(0)
    , pos_y_parser_(0)
    , pos_z_parser_(0)
    , vel_x_parser_(0)
    , vel_y_parser_(0)
    , vel_z_parser_(0)
    , m_parser_(0)
    , n_x_parser_(0)
    , n_y_parser_(0)
    , n_z_parser_(0)
    , h_parser_(0)
    , b_motion_parser_(0) { }

// sim_t_pskel
//

void sim_t_pskel::output() { }

void sim_t_pskel::param() { }

void sim_t_pskel::particle() { }

void sim_t_pskel::cuboid() { }

void sim_t_pskel::post_sim_t() { }

bool sim_t_pskel::_start_element_impl(const ::xml_schema::ro_string& ns, const ::xml_schema::ro_string& n, const ::xml_schema::ro_string* t) {
    XSD_UNUSED(t);

    if (this->::xml_schema::complex_content::_start_element_impl(ns, n, t))
        return true;

    if (n == "output" && ns.empty()) {
        this->::xml_schema::complex_content::context_.top().parser_ = this->output_parser_;

        if (this->output_parser_)
            this->output_parser_->pre();

        return true;
    }

    if (n == "param" && ns.empty()) {
        this->::xml_schema::complex_content::context_.top().parser_ = this->param_parser_;

        if (this->param_parser_)
            this->param_parser_->pre();

        return true;
    }

    if (n == "particle" && ns.empty()) {
        this->::xml_schema::complex_content::context_.top().parser_ = this->particle_parser_;

        if (this->particle_parser_)
            this->particle_parser_->pre();

        return true;
    }

    if (n == "cuboid" && ns.empty()) {
        this->::xml_schema::complex_content::context_.top().parser_ = this->cuboid_parser_;

        if (this->cuboid_parser_)
            this->cuboid_parser_->pre();

        return true;
    }

    return false;
}

bool sim_t_pskel::_end_element_impl(const ::xml_schema::ro_string& ns, const ::xml_schema::ro_string& n) {
    if (this->::xml_schema::complex_content::_end_element_impl(ns, n))
        return true;

    if (n == "output" && ns.empty()) {
        if (this->output_parser_) {
            this->output_parser_->post_output_t();
            this->output();
        }

        return true;
    }

    if (n == "param" && ns.empty()) {
        if (this->param_parser_) {
            this->param_parser_->post_param_t();
            this->param();
        }

        return true;
    }

    if (n == "particle" && ns.empty()) {
        if (this->particle_parser_) {
            this->particle_parser_->post_particle_t();
            this->particle();
        }

        return true;
    }

    if (n == "cuboid" && ns.empty()) {
        if (this->cuboid_parser_) {
            this->cuboid_parser_->post_cuboid_t();
            this->cuboid();
        }

        return true;
    }

    return false;
}

// output_t_pskel
//

void output_t_pskel::name(const ::std::string&) { }

void output_t_pskel::frequency(int) { }

void output_t_pskel::post_output_t() { }

bool output_t_pskel::_start_element_impl(const ::xml_schema::ro_string& ns, const ::xml_schema::ro_string& n, const ::xml_schema::ro_string* t) {
    XSD_UNUSED(t);

    if (this->::xml_schema::complex_content::_start_element_impl(ns, n, t))
        return true;

    if (n == "name" && ns.empty()) {
        this->::xml_schema::complex_content::context_.top().parser_ = this->name_parser_;

        if (this->name_parser_)
            this->name_parser_->pre();

        return true;
    }

    if (n == "frequency" && ns.empty()) {
        this->::xml_schema::complex_content::context_.top().parser_ = this->frequency_parser_;

        if (this->frequency_parser_)
            this->frequency_parser_->pre();

        return true;
    }

    return false;
}

bool output_t_pskel::_end_element_impl(const ::xml_schema::ro_string& ns, const ::xml_schema::ro_string& n) {
    if (this->::xml_schema::complex_content::_end_element_impl(ns, n))
        return true;

    if (n == "name" && ns.empty()) {
        if (this->name_parser_)
            this->name(this->name_parser_->post_string());

        return true;
    }

    if (n == "frequency" && ns.empty()) {
        if (this->frequency_parser_)
            this->frequency(this->frequency_parser_->post_int());

        return true;
    }

    return false;
}

// param_t_pskel
//

void param_t_pskel::t_end(double) { }

void param_t_pskel::delta_t(double) { }

void param_t_pskel::post_param_t() { }

bool param_t_pskel::_start_element_impl(const ::xml_schema::ro_string& ns, const ::xml_schema::ro_string& n, const ::xml_schema::ro_string* t) {
    XSD_UNUSED(t);

    if (this->::xml_schema::complex_content::_start_element_impl(ns, n, t))
        return true;

    if (n == "t_end" && ns.empty()) {
        this->::xml_schema::complex_content::context_.top().parser_ = this->t_end_parser_;

        if (this->t_end_parser_)
            this->t_end_parser_->pre();

        return true;
    }

    if (n == "delta_t" && ns.empty()) {
        this->::xml_schema::complex_content::context_.top().parser_ = this->delta_t_parser_;

        if (this->delta_t_parser_)
            this->delta_t_parser_->pre();

        return true;
    }

    return false;
}

bool param_t_pskel::_end_element_impl(const ::xml_schema::ro_string& ns, const ::xml_schema::ro_string& n) {
    if (this->::xml_schema::complex_content::_end_element_impl(ns, n))
        return true;

    if (n == "t_end" && ns.empty()) {
        if (this->t_end_parser_)
            this->t_end(this->t_end_parser_->post_double());

        return true;
    }

    if (n == "delta_t" && ns.empty()) {
        if (this->delta_t_parser_)
            this->delta_t(this->delta_t_parser_->post_double());

        return true;
    }

    return false;
}

// particle_t_pskel
//

void particle_t_pskel::pos_x(double) { }

void particle_t_pskel::pos_y(double) { }

void particle_t_pskel::pos_z(double) { }

void particle_t_pskel::vel_x(double) { }

void particle_t_pskel::vel_y(double) { }

void particle_t_pskel::vel_z(double) { }

void particle_t_pskel::m(double) { }

void particle_t_pskel::post_particle_t() { }

bool particle_t_pskel::_start_element_impl(const ::xml_schema::ro_string& ns, const ::xml_schema::ro_string& n, const ::xml_schema::ro_string* t) {
    XSD_UNUSED(t);

    if (this->::xml_schema::complex_content::_start_element_impl(ns, n, t))
        return true;

    if (n == "pos_x" && ns.empty()) {
        this->::xml_schema::complex_content::context_.top().parser_ = this->pos_x_parser_;

        if (this->pos_x_parser_)
            this->pos_x_parser_->pre();

        return true;
    }

    if (n == "pos_y" && ns.empty()) {
        this->::xml_schema::complex_content::context_.top().parser_ = this->pos_y_parser_;

        if (this->pos_y_parser_)
            this->pos_y_parser_->pre();

        return true;
    }

    if (n == "pos_z" && ns.empty()) {
        this->::xml_schema::complex_content::context_.top().parser_ = this->pos_z_parser_;

        if (this->pos_z_parser_)
            this->pos_z_parser_->pre();

        return true;
    }

    if (n == "vel_x" && ns.empty()) {
        this->::xml_schema::complex_content::context_.top().parser_ = this->vel_x_parser_;

        if (this->vel_x_parser_)
            this->vel_x_parser_->pre();

        return true;
    }

    if (n == "vel_y" && ns.empty()) {
        this->::xml_schema::complex_content::context_.top().parser_ = this->vel_y_parser_;

        if (this->vel_y_parser_)
            this->vel_y_parser_->pre();

        return true;
    }

    if (n == "vel_z" && ns.empty()) {
        this->::xml_schema::complex_content::context_.top().parser_ = this->vel_z_parser_;

        if (this->vel_z_parser_)
            this->vel_z_parser_->pre();

        return true;
    }

    if (n == "m" && ns.empty()) {
        this->::xml_schema::complex_content::context_.top().parser_ = this->m_parser_;

        if (this->m_parser_)
            this->m_parser_->pre();

        return true;
    }

    return false;
}

bool particle_t_pskel::_end_element_impl(const ::xml_schema::ro_string& ns, const ::xml_schema::ro_string& n) {
    if (this->::xml_schema::complex_content::_end_element_impl(ns, n))
        return true;

    if (n == "pos_x" && ns.empty()) {
        if (this->pos_x_parser_)
            this->pos_x(this->pos_x_parser_->post_double());

        return true;
    }

    if (n == "pos_y" && ns.empty()) {
        if (this->pos_y_parser_)
            this->pos_y(this->pos_y_parser_->post_double());

        return true;
    }

    if (n == "pos_z" && ns.empty()) {
        if (this->pos_z_parser_)
            this->pos_z(this->pos_z_parser_->post_double());

        return true;
    }

    if (n == "vel_x" && ns.empty()) {
        if (this->vel_x_parser_)
            this->vel_x(this->vel_x_parser_->post_double());

        return true;
    }

    if (n == "vel_y" && ns.empty()) {
        if (this->vel_y_parser_)
            this->vel_y(this->vel_y_parser_->post_double());

        return true;
    }

    if (n == "vel_z" && ns.empty()) {
        if (this->vel_z_parser_)
            this->vel_z(this->vel_z_parser_->post_double());

        return true;
    }

    if (n == "m" && ns.empty()) {
        if (this->m_parser_)
            this->m(this->m_parser_->post_double());

        return true;
    }

    return false;
}

// cuboid_t_pskel
//

void cuboid_t_pskel::pos_x(double) { }

void cuboid_t_pskel::pos_y(double) { }

void cuboid_t_pskel::pos_z(double) { }

void cuboid_t_pskel::vel_x(double) { }

void cuboid_t_pskel::vel_y(double) { }

void cuboid_t_pskel::vel_z(double) { }

void cuboid_t_pskel::m(double) { }

void cuboid_t_pskel::n_x(int) { }

void cuboid_t_pskel::n_y(int) { }

void cuboid_t_pskel::n_z(int) { }

void cuboid_t_pskel::h(double) { }

void cuboid_t_pskel::b_motion(double) { }

void cuboid_t_pskel::post_cuboid_t() { }

bool cuboid_t_pskel::_start_element_impl(const ::xml_schema::ro_string& ns, const ::xml_schema::ro_string& n, const ::xml_schema::ro_string* t) {
    XSD_UNUSED(t);

    if (this->::xml_schema::complex_content::_start_element_impl(ns, n, t))
        return true;

    if (n == "pos_x" && ns.empty()) {
        this->::xml_schema::complex_content::context_.top().parser_ = this->pos_x_parser_;

        if (this->pos_x_parser_)
            this->pos_x_parser_->pre();

        return true;
    }

    if (n == "pos_y" && ns.empty()) {
        this->::xml_schema::complex_content::context_.top().parser_ = this->pos_y_parser_;

        if (this->pos_y_parser_)
            this->pos_y_parser_->pre();

        return true;
    }

    if (n == "pos_z" && ns.empty()) {
        this->::xml_schema::complex_content::context_.top().parser_ = this->pos_z_parser_;

        if (this->pos_z_parser_)
            this->pos_z_parser_->pre();

        return true;
    }

    if (n == "vel_x" && ns.empty()) {
        this->::xml_schema::complex_content::context_.top().parser_ = this->vel_x_parser_;

        if (this->vel_x_parser_)
            this->vel_x_parser_->pre();

        return true;
    }

    if (n == "vel_y" && ns.empty()) {
        this->::xml_schema::complex_content::context_.top().parser_ = this->vel_y_parser_;

        if (this->vel_y_parser_)
            this->vel_y_parser_->pre();

        return true;
    }

    if (n == "vel_z" && ns.empty()) {
        this->::xml_schema::complex_content::context_.top().parser_ = this->vel_z_parser_;

        if (this->vel_z_parser_)
            this->vel_z_parser_->pre();

        return true;
    }

    if (n == "m" && ns.empty()) {
        this->::xml_schema::complex_content::context_.top().parser_ = this->m_parser_;

        if (this->m_parser_)
            this->m_parser_->pre();

        return true;
    }

    if (n == "n_x" && ns.empty()) {
        this->::xml_schema::complex_content::context_.top().parser_ = this->n_x_parser_;

        if (this->n_x_parser_)
            this->n_x_parser_->pre();

        return true;
    }

    if (n == "n_y" && ns.empty()) {
        this->::xml_schema::complex_content::context_.top().parser_ = this->n_y_parser_;

        if (this->n_y_parser_)
            this->n_y_parser_->pre();

        return true;
    }

    if (n == "n_z" && ns.empty()) {
        this->::xml_schema::complex_content::context_.top().parser_ = this->n_z_parser_;

        if (this->n_z_parser_)
            this->n_z_parser_->pre();

        return true;
    }

    if (n == "h" && ns.empty()) {
        this->::xml_schema::complex_content::context_.top().parser_ = this->h_parser_;

        if (this->h_parser_)
            this->h_parser_->pre();

        return true;
    }

    if (n == "b_motion" && ns.empty()) {
        this->::xml_schema::complex_content::context_.top().parser_ = this->b_motion_parser_;

        if (this->b_motion_parser_)
            this->b_motion_parser_->pre();

        return true;
    }

    return false;
}

bool cuboid_t_pskel::_end_element_impl(const ::xml_schema::ro_string& ns, const ::xml_schema::ro_string& n) {
    if (this->::xml_schema::complex_content::_end_element_impl(ns, n))
        return true;

    if (n == "pos_x" && ns.empty()) {
        if (this->pos_x_parser_)
            this->pos_x(this->pos_x_parser_->post_double());

        return true;
    }

    if (n == "pos_y" && ns.empty()) {
        if (this->pos_y_parser_)
            this->pos_y(this->pos_y_parser_->post_double());

        return true;
    }

    if (n == "pos_z" && ns.empty()) {
        if (this->pos_z_parser_)
            this->pos_z(this->pos_z_parser_->post_double());

        return true;
    }

    if (n == "vel_x" && ns.empty()) {
        if (this->vel_x_parser_)
            this->vel_x(this->vel_x_parser_->post_double());

        return true;
    }

    if (n == "vel_y" && ns.empty()) {
        if (this->vel_y_parser_)
            this->vel_y(this->vel_y_parser_->post_double());

        return true;
    }

    if (n == "vel_z" && ns.empty()) {
        if (this->vel_z_parser_)
            this->vel_z(this->vel_z_parser_->post_double());

        return true;
    }

    if (n == "m" && ns.empty()) {
        if (this->m_parser_)
            this->m(this->m_parser_->post_double());

        return true;
    }

    if (n == "n_x" && ns.empty()) {
        if (this->n_x_parser_)
            this->n_x(this->n_x_parser_->post_int());

        return true;
    }

    if (n == "n_y" && ns.empty()) {
        if (this->n_y_parser_)
            this->n_y(this->n_y_parser_->post_int());

        return true;
    }

    if (n == "n_z" && ns.empty()) {
        if (this->n_z_parser_)
            this->n_z(this->n_z_parser_->post_int());

        return true;
    }

    if (n == "h" && ns.empty()) {
        if (this->h_parser_)
            this->h(this->h_parser_->post_double());

        return true;
    }

    if (n == "b_motion" && ns.empty()) {
        if (this->b_motion_parser_)
            this->b_motion(this->b_motion_parser_->post_double());

        return true;
    }

    return false;
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.
