// Not copyrighted - public domain.
//
// This sample parser implementation was generated by CodeSynthesis XSD,
// an XML Schema to C++ data binding compiler. You may use it in your
// programs without any restrictions.
//

#include "XMLParserReader.h"
#include "input-pimpl.h"

#include <iostream>

namespace inputReader {
    XMLParserReader::XMLParserReader() = default;

    XMLParserReader::~XMLParserReader() = default;

    void XMLParserReader::readFile(ParticleContainer& container, const char* filename) {
        try {
            // Instantiate individual parsers.
            //
            ::sim_t_pimpl sim_t_p;
            ::output_t_pimpl output_t_p;
            ::xml_schema::string_pimpl string_p;
            ::xml_schema::int_pimpl int_p;
            ::param_t_pimpl param_t_p;
            ::xml_schema::double_pimpl double_p;
            ::particle_t_pimpl particle_t_p;
            ::cuboid_t_pimpl cuboid_t_p;

            // Connect the parsers together.
            //
            sim_t_p.parsers(output_t_p, param_t_p, particle_t_p, cuboid_t_p);

            output_t_p.parsers(string_p, int_p);

            param_t_p.parsers(double_p, double_p);

            particle_t_p.parsers(double_p, double_p, double_p, double_p, double_p, double_p, double_p);

            cuboid_t_p.parsers(double_p, double_p, double_p, double_p, double_p, double_p, double_p, int_p, int_p, int_p, double_p, double_p);

            // Parse the XML document.
            //
            ::xml_schema::document doc_p(sim_t_p, "simulation");

            sim_t_p.pre();
            doc_p.parse(filename);
            sim_t_p.post_sim_t();
        } catch (const ::xml_schema::exception& e) {
            std::cerr << e << std::endl;
            std::exit(EXIT_FAILURE);
        } catch (const std::ios_base::failure&) {
            std::cerr << filename << ": error: io failure" << std::endl;
            std::exit(EXIT_FAILURE);
        }
    }
}
